{
	"info": {
		"_postman_id": "031cdeb1-0e44-48c2-ab04-376a8c4c2493",
		"name": "API Test Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20505692"
	},
	"item": [
		{
			"name": "PositiveTestGetMyPosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "deaa2e3e25fffa963267db85779d6bd6",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeTestGetMyPosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"critical\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "deaa2e3e25fffa963267db85779d6bd6",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PositiveTestGetOthersPosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length != 0).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "deaa2e3e25fffa963267db85779d6bd6",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ASC&page=9",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeTestGetOthersPosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"critical\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "deaa2e3e25fffa963267db85779d6bd6",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ASC&page=9",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PositiveTestAuthorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Token is deaa2e3e25fffa963267db85779d6bd6\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.eql(\"deaa2e3e25fffa963267db85779d6bd6\");\r",
							"});\r",
							"\r",
							"pm.test(\"Id is 3198\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id == 3198).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "GB202301271f419",
							"type": "text"
						},
						{
							"key": "password",
							"value": "f83466a568",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://test-stand.gb.ru/gateway/login",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"gateway",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeTestAuthorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "GB",
							"type": "text"
						},
						{
							"key": "password",
							"value": "f83466a568",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://test-stand.gb.ru/gateway/login",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"gateway",
						"login"
					]
				}
			},
			"response": []
		}
	]
}